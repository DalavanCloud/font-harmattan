#! /usr/bin/perl 

use strict;

use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Spec::Functions;
use HTML::Entities;
 
use strict;

our ($help, $family, $glyphsApp, $silent);

GetOptions (
    'family=s'  => \$family,
    'glyphsApp' => \$glyphsApp,
    'silent'    => \$silent,
    'help|?'    => \$help) or pod2usage(2);
    
pod2usage( -verbose => 2, -noperldoc => 1) if $help;

pod2usage(-msg => "no parameters needed\n", -verbose => 1) if defined $ARGV[0];


=head1 TITLE

absGenClass - Generate classes based on ABS shapping

=head1 SYNOPSIS

absGenClass [-h]  [-f fontID]  [-s]  

=head1 OPTIONS

  --help      output extended help message
  --family    a letter representing font family (S = Scheherazade, etc)
  --glyphsApp use GlyphsApp naming conventions.
  --silent    do not issue warnings during common setup code

Single letter forms (e.g., -h) are permitted.

=head1 DESCRIPTION

Generates .xml class file for make_gdl and friends. The characters included 
are those in the indicated family.

Requires two auxillary text files:

=over 4

=item UCDextract.txt

Data excerpted from Unicode Data files (UCD) and put in CSV format, generally needing to contain the 
following fields taken directly from UCD:

  #USV,General,Class,Bidi,Decomposition,Mirror,Joining,Isolated,Final,Medial,Initial,Name,Joingroup,Age

For characters not yet added to Unicode, extra records can be added to this file as needed
to generate appropriate test data.

=item ABSGlyphList.txt

Another CSV-formatted file giving details about Arabic chars that should be present
in fonts, and what font features impact their behavior. [TODO: Document this]

=back

Tests currently defined:

=cut

# Count of warnings:
my $WarnCount;

sub MyWarn
{
    $WarnCount++;
    warn (@_) unless $silent;
}

sub KeyList
{
    # debugging tool: Concatinate list of keys of a hash passed by ref
    my $h = shift;
    return $h . " = " . join(',', keys %$h);
}


# Borrowed from List::MoreUtils
sub uniq (@) {
    my %seen = ();
    grep { not $seen{$_}++ } @_;
}

    

my $gid;                # Glyph ID
my $uid;                # Unicode ID (= decimal integer representign USV)

my %charTakesDiac;  # Hash, indexed by uid, returns true if this char has AP for attaching diacritics


# Read Unicode character information
# (Done this way rather than Unicode::UCD so as to support new chars easily)
# While at it, build lists of unicode chars of interest in this font:

my %UCD;        # Hash, indexed by USV (decimal), returning anonymous hash keyed by:
#   'general'   #   returns Unicode general category, e.g., Lo, Zs, etc
#   'bidi'      #   returns Unicode bidi category, e.g., AL, MSN, BN, etc.
#   'joining'   #   returns Unicode Arabic linking, e.g., D, R, U, etc.
#               #   etc. (see UCDextract.txt)
#   'uid'       #   USV as decimal integer
#   'features'  #   hash keyed by features impacting this character. See ABSGlyphList (below).

# find UCDextract.txt -- in current directory or same as $0
my $ucd = "UCDextract.txt";
$ucd = catfile(dirname($0), '..', 'data', $ucd) unless (-f $ucd);
open (IN, $ucd) || die "Can't open $ucd";
my @cols;
while (<IN>)
{
    s/\s+$//o;  # OS-safe chomp
    if (s/^#//)
    {
        # this line has our column headers:
        $_ = lc($_);
        @cols = split(';');
    }
    else
    {
        my $h = {};
        @{$h}{@cols} = split(';');
        $uid = hex($h->{'usv'} || die "Invalid USV in UCDExtract.txt at '$_'");
        $UCD{$uid} = $h;
    }
}

# Read ABSGlyphList to get glyph info:
my %fontName = (    # hash of known font inventories, bcp47tags supported, default value overrides
    s => ['Scheherazade', qr/^(?:ku|sd|rhg|ug|ur)$/o,   { }         ],
    l => ['Lateef',       qr/^(?:ku|sd|rhg|ug|ur)$/o,   { }         ],
    h => ['Harmattan',    qr/^$/o,                      {cv62 => 1} ],
    m => ['Alkalami',     qr/^$/o,                      { }         ],
    n => ['Nastaliq',     qr/^$/o,                      { }         ],
    );

my ($fontRE);

if ($family)
{
    # make font ID a single lowercase char:
    $family = lc(substr($family, 0, 1));
    die "Font unknown: -f $family\n" unless exists $fontName{$family};
    $fontRE = qr/\*|$family/oi;
}
else
{
    $fontRE = qr/./o;
}

my %JoinClasses;

# Which col of ABSGlyphList do we want ot use?
my $nameCol = $glyphsApp ? 'glyphsname' : 'name';

# Process any given name just once:
my %haveSeen;

# find ABSGlyphList.txt -- in current directory or ../data/ABSGlyphList subdir of $0
my $gl = "absGlyphList.txt";
$gl = catfile(dirname($0), '..', 'absGlyphList', $gl) unless (-f $gl);
open (IN, $gl) || die "Can't open $gl";
while (<IN>)
{
    s/\s+$//o;  # OS-safe chomp
    next if /^\s*(?:\#.*)$/;    # Skip comments and blank lines
    if (/^Name\t.*Order\t/)
    {
        # this line has our column headers:
        $_ = lc($_);
        @cols = split("\t");
    }
    else
    {
        my $h = {};
        @{$h}{@cols} = split("\t");
        
        next unless $h->{'fonts'} =~ $fontRE    # make sure this is in the relevant font
            && !($haveSeen{$h->{$nameCol}})     # and we haven't already processed this name
            && $h->{$nameCol} =~ /^([^.]+?)(?:\..+)*$/;   # and the glyphname has a reasonable format
        my $basename = $1;   
        my $extension = $2;
        # print STDERR "$h->{$nameCol} \t==> $basename\n";
        $uid = hex($h->{'usv'});        # might be empty string, resulting in uid=0
        if ($uid > 0)
        {
        	warn ("Encoded char '$h->{$nameCol} has extension '$extension' -- be sure to check construction of joined forms") if $extension;
        	my $joining = $UCD{$uid}{'joining'};
        	next unless $joining;
        	$JoinClasses{$joining} = [] unless defined $JoinClasses{$joining};
          push @{$JoinClasses{$joining}}, ["$basename", $extension];	# Remember name and extension for later.
          $haveSeen{$h->{$nameCol}} = 1;
        }
    }
}


warn "$WarnCount warnings during setup not displayed.\n" if $WarnCount and $silent;
undef $silent;      # Turn on warnings from here on


foreach my $join (qw(Dual Right))
{
	my @list = sort {$a->[0] cmp $b->[$0]} @{$JoinClasses{substr($join,0,1)}};
	foreach my $form (qw(Isol Fina Medi Init))
	{
		next if $join eq 'Right' && $form =~ /Medi|Init/;
		my $mod = $form eq 'Isol' ? '' : $glyphsApp ? '.' . lc($form) : substr($form, 0, 3);
		my $class = "${join}Link${form}";
		print "    <class name='$class'>";
		for (my $i = 0; $i <= $#list; $i++)
		{
			print $i % 5 ? ' ' : "\n        ", $list[$i][0], $glyphsApp ? "$list[$i][1]$mod" : "$mod$list[$i][1]";
		}
		print "\n    </class>\n\n";
	}
}
	


warn "$WarnCount total warnings issued.\n" if $WarnCount;


=head1 AUTHOR

Bob Hallissy L<http://scripts.sil.org/>.
(see CONTRIBUTORS for other authors).

=head1 HISTORY

 2016-10-12 Code borrowed from absGenFTML
 
=head1 LICENSING

Copyright (c) 2016-2017, SIL International (http://www.sil.org)

This script is released under the terms of the MIT License.
For details, see the full text of the license in the file LICENSE.

=cut
