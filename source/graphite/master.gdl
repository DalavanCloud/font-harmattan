////////////////////////////////////////////////////////////////////////////////////////////
//
//	File: master.gdl
//
//	Main Graphite code file for Harmattan, including all rules.
//
////////////////////////////////////////////////////////////////////////////////////////////

/*
	This file is part of Harmattan font family 
	(http://scripts.sil.org/Harmattan) and is 
	Copyright (c) 2014-2015 SIL International (http://www.sil.org/),
	with Reserved Font Names "Harmattan" and "SIL".

	This Font Software is licensed under the SIL Open Font License,
	Version 1.1.

	You should have received a copy of the license along with this Font Software.
	If this is not the case, go to (http://scripts.sil.org/OFL) for all the
	details including an FAQ.
*/

#include "stddef.gdh"
AutoPseudo = 0;
ScriptDirection = HORIZONTAL_RIGHT_TO_LEFT;
Bidi = true;

environment {MUnits=2048};

// Temporary until incorporated into stddef.h:
#define DIR_NSM 16		// not defined in stddef.h but is in the compiler
#define DIR_LRI 17		// These 4 new to Unicode 6.3
#define DIR_RLI 18
#define DIR_FSI 19
#define DIR_PDI 20

#if 0   // DESIGN NOTES

One of the complex issues is mark attachment. Problems stem from the following issues:

1) Do we require marks to be in a particular order?
	The typical sequence of marks is shadda or hamza, followed by vowel, followed by quranic mark.
	Windows Arabic uses this order, but a canonical Unicode string will not always be in this order.
	Further, non-canonical Unicode strings can have the marks in any order.
	Decision: We need to support any order.

2) Do we visually identify illogical mark sequences?
	While the order of the marks on a given base is variable, certain marks should not occur
	simultaneously. For example, no more than one vowel mark should occur. If two vowels occur on 
	the same base, we can visually identify this error by inserting a dotted circle between them
	which will then act as a base for the second vowel.
	But detecting this if we allow any order vowels (see 1) is a bit tricky. 
	Decision: This kind of feedback is probably unwise for minority languages.

3) Exactly what marks are mutually exclusive? Seems clear that the vowels (e.g kasra, fatha, damma,
	kasratan, fathatan, dammatan, sukun) are mutually exclusive with each other. For Arabic
	shadda, hamza above, hamza below, and maddah are also mutually exclusive, but I don't know about
	other languages. I also don't know about the remaining (i.e., quranic) marks.
	Decision: assume shadda, hamza a/b, maddah and mark noon ghunna are mutually exclusive.
	
4) However, maddah works differently from shadda and hamza
	in that it is placed above the vowel rather than below. (For example, superscript alef + maddah)

To accomplish all this, the design we use is to reorder the marks to a logical
order based on 4 classes:
	cMark1 class contains shadda, hamza, mark noon ghunna
	cMark2 class contains the vowels
	cMark3 class contains maddah
	cMark4 class contains quranic marks and Rohingya tones
	
Only cMark2 and cMark4 can have duplicates. Except right now there are no outer attachment points for the
quranic marks, so multiples don't work right.


#endif

// Glyph definitions and rules for codepage 1252 composites
#include "cp1252.gdl"

// Hard-coded glyph and class definitions:
#include "HarGlyphs.gdh"

// Features 
#include "HarFeatures.gdh"


#define alefAttached user1


// Now add additional classes we need:

table(glyph)

	cShaddaKasraLigatures {
		component.shadda = box(bb.left, bb.bottom, bb.right, bb.bottom + bb.height/2);
		component.kasra  = box(bb.left, bb.bottom + bb.height/2, bb.right, bb.top)
	};

endtable; // glyph

// Allow a sequence of up to 4 marks.
#define MARKS [ cAnyMarks [ cAnyMarks [ cAnyMarks cAnyMarks? ]? ]? ]?

#define MARKSBELOW [ cAnyMarksBelow [ cAnyMarksBelow cAnyMarksBelow? ]? ]?

#define MARKSABOVE [ cAnyMarksAbove [ cAnyMarksAbove cAnyMarksAbove? ]? ]?


table(substitution)

pass(1)	// Encoding, decomposition, mirroring

	
	// QUESTION: are there more things that need to be decomposed?
	cAlefPlusMark _ >  absAlef:1  cAlefMark$1:1 ;
	
	if (graphite1mirror)
		(cMirrorOpen cMirrorClose)  >  (cMirrorClose cMirrorOpen);
	endif;
	
	// The following is a debugging tool so you can find out whether the app is rendering with Graphite or not.
	// The string "RenderingUnknown" will be rendered as "RenderingGraphite":
	
	codepoint("U") codepoint("n") codepoint("k") codepoint("n") codepoint("o") codepoint("w") codepoint("n") _               > 
	codepoint("G") codepoint("r") codepoint("a") codepoint("p") codepoint("h") codepoint("i") codepoint("t") codepoint("e"):16  / 
		codepoint("R") codepoint("e") codepoint("n") codepoint("d") codepoint("e") codepoint("r") codepoint("i") codepoint("n") codepoint("g")  _ _ _ _ _ _ _ _;

endpass; // 1


pass(2)	// Reorder marks to "logical" order (this allows for arbitrary order input)

	// NB: Only cMark2 (vowel marks) and cMark4 (quranic marks) can have multiples.
	// The rules below allow for up to 3 vowel marks and up to 3 quranic marks,
	// with a total of 4 marks.
	
	// We don't swap the glyphs, because that would mess up the original order,
	// rather we delete and insert.
	
	_  cMark234  cMark1  >  @5:5  @2  _  / _  _  ^  [ cMark234 cMark234? ]?  _;
	_  cMark34   cMark2  >  @5:5  @2  _  / _  _  ^  [ cMark34  cMark34?  ]?  _;
	_  cMark4    cMark3  >  @5:5  @2  _  / _  _  ^  [ cMark4   cMark4?   ]?  _;
	
	// Note: Jonathan says inserting circles is a bad idea for minority language support.

endpass; // 2


pass(3)	// Contextual forms, lam-alef ligature, subtending marks

	// Lam-alef
	
	// Here is JK's elegant solution to contextual forms using a ligature glyph...
/***
	(absLam absLamFin)=L  absAlef=A  > 
		(absLamAlef absLamAlefFin):(L A) {component {lam.ref = @L; alef.ref=@A } } gAlefPlaceholder
		/ _  MARKS  _  MARKS ^;
***/
	// ...but we're using two separate glyphs, because of all the combinations.
	cLamIso cAlefIso  >  cLamIniBeforeAlef {alefAttached = false}  cAlefFinAfterLamIni  / _ MARKS ^ _ ;
	cLamFin cAlefIso  >  cLamMedBeforeAlef {alefAttached = false}  cAlefFinAfterLamMed  / _ MARKS ^ _ ;

	// All other contextual forms
	
	(cDualLinkIsol cDualLinkFina absTatweel g_zerojoin) (cDualLinkIsol cRightLinkIsol absTatweel g_zerojoin) > 
		(cDualLinkInit cDualLinkMedi absTatweel g_zerojoin) (cDualLinkFina cRightLinkFina absTatweel g_zerojoin)
		/ _  MARKS ^ _ ;


	// Subtending marks
	
	cSignTakes4 cDigitsAny cDigitsAny cDigitsAny cDigitsAny  >
		cSign4 cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes3Medium cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Medium cDigitsAnyMedium cDigitsAnyMedium cDigitsAnyMedium;
		
	cSignTakes3Small cDigitsAny cDigitsAny cDigitsAny  >
		cSign3Small cDigitsAnySmall cDigitsAnySmall cDigitsAnySmall;
		
	cSignTakes2 cDigitsAny cDigitsAny  >
		cSign2 cDigitsAnyMedium cDigitsAnyMedium;

	cSignTakes1 cDigitsAny  >  cSign1  cDigitsAnyMedium;
	

endpass; // 3


pass(4)	// Features, special behaviors

	cLowHamzaBase  absHamzaAbove  >  cLowHamzaComposed:(1 2)  _;
	
	if (warshDiacritics == std)
		(absAlef absAlefFin)=A absHamzaAbove=H > (absAlefHamzaAbove absAlefHamzaAboveFin):(A H) _ / _ cMark1? _ ;
		(absAlef absAlefFin)=A absHamzaBelow=H > (absAlefHamzaBelow absAlefHamzaBelowFin):(A H) _ / _ cMark1? _ ;
		absLamIni_preAlef=L    absHamzaAbove=H > absLamHamzaIni_preAlef:(L H) _ / _ cMark1? _ ;
	endif;
	if (warshDiacritics != std)
		(absAlef absAlefFin)=A absHamzaAbove=H > (absAlefHamzaAbove_warsh absAlefHamzaAboveFin_warsh):(A H) _ / _ cMark1? _ ;
		(absAlef absAlefFin)=A absHamzaBelow=H > (absAlefHamzaBelow_warsh absAlefHamzaBelowFin_warsh):(A H) _ / _ cMark1? _ ;
		absLamIni_preAlef=L    absHamzaAbove=H > absLamHamzaIni_preAlef_warsh:(L H) _ / _ cMark1? _ ;
		if (warshDiacritics == touching)
				absAlef=A (absFatha absKasra)=V > (absAlefFatha_warsh absAlefKasra_warsh)$V:(A,V) _ / _  cMark1? _ ;
		endif;
	endif;

	if (jeemHahMedAlt == handwritten)
		cJeemHahMed > cJeemHahMedHandwritten;
	endif;

	if (meemAlt == sindhi)
		cMeem  >  cMeem_sindhi;
	endif;

	if (sadDadAlt == half)
		cSadDad > cSadDadHalf;
	endif;

	if (maddahAlt != large)
		cMaddah > cMaddah_small;
	endif;

	if (shaddaKasra == std)
		absShadda  cShaddaKasraMarks  >  _  cShaddaKasraLigatures:(1 2);
	endif;
	
	// QUESTION: do we really need these if we're doing the reordering above?
	// TODO: if we use them, make them into real ligatures
	absShadda     cShaddaMarks >  _  cShaddaLigatures:(1 2) / _ ^ _ ;
	absHamzaAbove cHamzaMarks  >  _  cHamzaLigatures:(1 2)  / _ ^ _ ;

	if (dammaAlt == short)
		cDamma > cDamma_short;
	endif;

	if (dammatanAlt == sixNine)
		cDammatan > cDammatan_sixNine;
	endif;

	if (daggeralefAlt == large)
		absSuperscriptAlef  >  absSuperscriptAlef_large  /  cTakesLargeDaggerAlef  _;
	endif;	

	if (sukunAlt == jasmDown)
		cno_Sukun  >  cSukunDownOpen;
	endif;
	if (sukunAlt == jasmLeft)
		cno_Sukun  >  cSukunLeftOpen;
	endif;

	if (endOfAyah == circle)
		cEndOfAyah  >  cEndOfAyahCircle;
	endif;
	if (endOfAyah == square)
		cEndOfAyah  >  cEndOfAyahSquare;
	endif;

	if (commaAlt == down)
		cno_Downward  >  cDownward;
	endif;

	if (!invis)
		// Note that substitution changes the directionality to the defaults for the
		// substituted glyph. :-( So be sure to fix it:
		cInvisible > zeroWidthSpace {directionality = @1.directionality};
	endif; 
	
endpass; // 4

endtable; // sub


table (positioning)

// Must allow for at least cMark1Below and/or cMark2Below to intervene between base and marks above.
// The code below is more general.

pass(1)

	// Lam-alef components:
	cHasExit=L {alefAttached = true}  cHasEntry=A {attach {to=@L; at=exitS; with=entryS}; insert = true}
		/ ^ _ {alefAttached == false}  MARKS  _;
	
	// Marks above

	// Note: the superscript-alef may have both the _alef and _diaA att pts; the ordering of these
	// rules assumes the alef AP should be used if there are no intervening marks.
	cHasAlefAP=B  cMarkSuperscriptAlefs {attach {to=@B; at=alefS; with=alefM};}  / _ ^ MARKSBELOW _ ;
	

#if 0
	// Special case: cozy up these diacritics a little, so they look more like the built-in ligatures:
	absShadda=S
		(absFatha absDamma absFathatan absDammatan)
			{attach {to=@S; at=point(diaA.x,diaA.y-80m); with=diaAM}; }
		/ _ ^ MARKSBELOW  _;

	absHamzaAbove=H
		(absFatha absDamma absFathatan absDammatan)
			{attach {to=@H; at=point(diaA.x+40m,diaA.y-80m); with=diaAM}; }
		/ _ ^ MARKSBELOW  _;
		
#endif

	// Normal case:
	(cBaseAny cMark1Above_volt cMarkSuperscriptAlefs)=B  (cAnyMarksAbove){attach {to=@B; at=diaAS; with=diaAM};}
		/ _ ^ MARKSBELOW  _;


	// Subtending marks
	// NB: at this point digits should be in visual order, right to left,
	// so we attach the left-most (logically first) to the sign, and proceed to the right.
	
	
	cSignDigit=D4 { attach {to=@D3; at=digitS; with=digitM }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitS; with=digitM }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSign4=S;

	cSignDigit=D3 { attach {to=@D2; at=digitS; with=digitM }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSign3=S;

	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSign2=S;

	cSignDigit { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSign1=S;
	
	// However, there is a bug in some integrations (e.g., Firefox) 
	// such that the glyps are still in logical order:
	
	cSign4=S
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitS; with=digitM }; insert = true}
	cSignDigit=D4 { attach {to=@D3; at=digitS; with=digitM }; insert = true};
	
	cSign3=S
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true}
	cSignDigit=D3 { attach {to=@D2; at=digitS; with=digitM }; insert = true};
	

	cSign2=S
	cSignDigit=D1 { attach {to=@S;  at=digitS; with=digitM }; insert = true}
	cSignDigit=D2 { attach {to=@D1; at=digitS; with=digitM }; insert = true};
	

	cSign1=S
	cSignDigit { attach {to=@S;  at=digitS; with=digitM }; insert = true};
	
	

endpass; // 1

pass(2)

	// Marks below

	// Special attachment points for lam-alef ligatures, to avoid collisions:
	cAllAlefFinAfterLam=B cAnyMarksBelow {attach {to=@B; at=dia2BS; with=dia2BM}}
		/ (absLamThreeDotsBelowIni_preAlef absLamThreeDotsBelowMed_preAlef cAnyMarksBelow) MARKSABOVE _ ^ MARKSABOVE _ ;

	// Normal case:
	(cBaseAny cMark1Below_volt)=B  cAnyMarksBelow {attach {to=@B; at=diaBS; with=diaBM}}
		/ _ ^ MARKSABOVE  _;

endpass; // 2

pass(3)
	// Kerning of reh-like and waw-like
	
	// tighten to following gaf-like, allowing intervening marks below
	cRehKernGaf {advance.x -= 300m} / cRehAll MARKSBELOW _ ;
	cRehKernGaf {advance.x -= 50m}  / cWawAll MARKSBELOW _ ;
	
	// loosen from following narrow initials with something below
	cNarrowIni {advance.x += 150m} / (cRehAll cWawAll) MARKS _ MARKSABOVE cAnyMarksBelow ;

	// loosen from following alef when with wide diac below it
	absAlef    {advance.x += 150m} / (cRehAll cWawAll) MARKS _ MARKS (absRightArrowheadBelow absLeftArrowheadBelow) ;
	
	// leave certain cases alone:
	// certain glyphs with diac below:
	cNoTightenReh_B		/ (cRehTighten cWawTighten cRehTightenMore cWawTightenMore) MARKS _ MARKS cAnyMarksBelow ;
	// certain glyphs when they and the reh/waw have diac above:
	cNoTightenRehA_A	/ (cRehTighten cWawTighten cRehTightenMore cWawTightenMore) MARKS cMarksAbove MARKS _ MARKS cAnyMarksAbove ;
	// certain tall narrow glyphs when reh/wah have diac above:
	cNoTightenRehA_		/ (cRehTighten cWawTighten cRehTightenMore cWawTightenMore) MARKS cMarksAbove MARKS _  ;
	 
	// otherwise tighten against most things:
	cTightenReh_ {advance.x -= 100m} / cRehTighten        MARKS _ ;
	cTightenReh_ {advance.x -= 170m} / cRehTightenMore    MARKS _ ;
	cTightenReh_ {advance.x -=  50m} / cWawTighten        MARKS _ ;
	cTightenReh_ {advance.x -= 100m} / cWawTightenMore    MARKS _ ;

	// tighter against Ain-like initials unless it has marks Below
	cAinLikeInit                     / (cRehTighten cRehTightenMore) MARKS _ MARKS cMarksBelow ;
	cAinLikeInit {advance.x -= 150m} / cRehTighten     MARKS _ ;
	cAinLikeInit {advance.x -= 200m} / cRehTightenMore MARKS _ ;
	
	// loosen when followed by Ain-like isolates
	cAinLikeIsol {advance.x += 100m} / (cRehAll cWawAll) MARKS _ ;
	
	// Other Kerning:
	
	// add space between lam-alef+markabove and tall things after:
	cTall {advance.x +=170m} / absAlefFin_postLamIni MARKS cAnyMarksAbove MARKS _ ;
	cTall {advance.x +=170m} / absAlefMaddaAboveFin_postLamIni            MARKS _ ;
	cTall {advance.x +=150m} / absAlefMaddaAboveFin_postLamIni_small      MARKS _ ;
	cTall {advance.x +=150m} / absAlefHamzaAboveFin_postLamIni            MARKS _ ;
	cTall {advance.x +=170m} / absAlefWaslaFin_postLamIni                 MARKS _ ;

	cNarrowIni {advance.x +=170m} / absAlefFin_postLamIni MARKS cAnyMarksAbove MARKS _ MARKS cAnyMarksAbove;
	cNarrowIni {advance.x +=170m} / absAlefMaddaAboveFin_postLamIni            MARKS _ MARKS cAnyMarksAbove;
	cNarrowIni {advance.x +=150m} / absAlefMaddaAboveFin_postLamIni_small      MARKS _ MARKS cAnyMarksAbove;
	cNarrowIni {advance.x +=150m} / absAlefHamzaAboveFin_postLamIni            MARKS _ MARKS cAnyMarksAbove;
	cNarrowIni {advance.x +=170m} / absAlefWaslaFin_postLamIni                 MARKS _ MARKS cAnyMarksAbove;

	
	// lower marksBelow on certain bases when followed by yehbarree
	cMarksBelow {shift.y -= 300m } / cYehBarreeMarkLower MARKSABOVE _ MARKS absYehBarreeFin ;
	
endpass; // 3	

endtable; // pos

endenvironment;
